{"ast":null,"code":"/*!\n * lightgallery | 2.6.1 | September 14th 2022\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return _assign.apply(this, arguments);\n};\nvar thumbnailsSettings = {\n  thumbnail: true,\n  animateThumb: true,\n  currentPagerPosition: 'middle',\n  alignThumbnails: 'middle',\n  thumbWidth: 100,\n  thumbHeight: '80px',\n  thumbMargin: 5,\n  appendThumbnailsTo: '.lg-components',\n  toggleThumb: false,\n  enableThumbDrag: true,\n  enableThumbSwipe: true,\n  thumbnailSwipeThreshold: 10,\n  loadYouTubeThumbnail: true,\n  youTubeThumbSize: 1,\n  thumbnailPluginStrings: {\n    toggleThumbnails: 'Toggle thumbnails'\n  }\n};\n\n/**\r\n * List of lightGallery events\r\n * All events should be documented here\r\n * Below interfaces are used to build the website documentations\r\n * */\nvar lGEvents = {\n  afterAppendSlide: 'lgAfterAppendSlide',\n  init: 'lgInit',\n  hasVideo: 'lgHasVideo',\n  containerResize: 'lgContainerResize',\n  updateSlides: 'lgUpdateSlides',\n  afterAppendSubHtml: 'lgAfterAppendSubHtml',\n  beforeOpen: 'lgBeforeOpen',\n  afterOpen: 'lgAfterOpen',\n  slideItemLoad: 'lgSlideItemLoad',\n  beforeSlide: 'lgBeforeSlide',\n  afterSlide: 'lgAfterSlide',\n  posterClick: 'lgPosterClick',\n  dragStart: 'lgDragStart',\n  dragMove: 'lgDragMove',\n  dragEnd: 'lgDragEnd',\n  beforeNextSlide: 'lgBeforeNextSlide',\n  beforePrevSlide: 'lgBeforePrevSlide',\n  beforeClose: 'lgBeforeClose',\n  afterClose: 'lgAfterClose',\n  rotateLeft: 'lgRotateLeft',\n  rotateRight: 'lgRotateRight',\n  flipHorizontal: 'lgFlipHorizontal',\n  flipVertical: 'lgFlipVertical',\n  autoplay: 'lgAutoplay',\n  autoplayStart: 'lgAutoplayStart',\n  autoplayStop: 'lgAutoplayStop'\n};\nvar Thumbnail = /** @class */function () {\n  function Thumbnail(instance, $LG) {\n    this.thumbOuterWidth = 0;\n    this.thumbTotalWidth = 0;\n    this.translateX = 0;\n    this.thumbClickable = false;\n    // get lightGallery core plugin instance\n    this.core = instance;\n    this.$LG = $LG;\n    return this;\n  }\n  Thumbnail.prototype.init = function () {\n    // extend module default settings with lightGallery core settings\n    this.settings = _assign(_assign({}, thumbnailsSettings), this.core.settings);\n    this.thumbOuterWidth = 0;\n    this.thumbTotalWidth = this.core.galleryItems.length * (this.settings.thumbWidth + this.settings.thumbMargin);\n    // Thumbnail animation value\n    this.translateX = 0;\n    this.setAnimateThumbStyles();\n    if (!this.core.settings.allowMediaOverlap) {\n      this.settings.toggleThumb = false;\n    }\n    if (this.settings.thumbnail) {\n      this.build();\n      if (this.settings.animateThumb) {\n        if (this.settings.enableThumbDrag) {\n          this.enableThumbDrag();\n        }\n        if (this.settings.enableThumbSwipe) {\n          this.enableThumbSwipe();\n        }\n        this.thumbClickable = false;\n      } else {\n        this.thumbClickable = true;\n      }\n      this.toggleThumbBar();\n      this.thumbKeyPress();\n    }\n  };\n  Thumbnail.prototype.build = function () {\n    var _this = this;\n    this.setThumbMarkup();\n    this.manageActiveClassOnSlideChange();\n    this.$lgThumb.first().on('click.lg touchend.lg', function (e) {\n      var $target = _this.$LG(e.target);\n      if (!$target.hasAttribute('data-lg-item-id')) {\n        return;\n      }\n      setTimeout(function () {\n        // In IE9 and bellow touch does not support\n        // Go to slide if browser does not support css transitions\n        if (_this.thumbClickable && !_this.core.lgBusy) {\n          var index = parseInt($target.attr('data-lg-item-id'));\n          _this.core.slide(index, false, true, false);\n        }\n      }, 50);\n    });\n    this.core.LGel.on(lGEvents.beforeSlide + \".thumb\", function (event) {\n      var index = event.detail.index;\n      _this.animateThumb(index);\n    });\n    this.core.LGel.on(lGEvents.beforeOpen + \".thumb\", function () {\n      _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;\n    });\n    this.core.LGel.on(lGEvents.updateSlides + \".thumb\", function () {\n      _this.rebuildThumbnails();\n    });\n    this.core.LGel.on(lGEvents.containerResize + \".thumb\", function () {\n      if (!_this.core.lgOpened) return;\n      setTimeout(function () {\n        _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;\n        _this.animateThumb(_this.core.index);\n        _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;\n      }, 50);\n    });\n  };\n  Thumbnail.prototype.setThumbMarkup = function () {\n    var thumbOuterClassNames = 'lg-thumb-outer ';\n    if (this.settings.alignThumbnails) {\n      thumbOuterClassNames += \"lg-thumb-align-\" + this.settings.alignThumbnails;\n    }\n    var html = \"<div class=\\\"\" + thumbOuterClassNames + \"\\\">\\n        <div class=\\\"lg-thumb lg-group\\\">\\n        </div>\\n        </div>\";\n    this.core.outer.addClass('lg-has-thumb');\n    if (this.settings.appendThumbnailsTo === '.lg-components') {\n      this.core.$lgComponents.append(html);\n    } else {\n      this.core.outer.append(html);\n    }\n    this.$thumbOuter = this.core.outer.find('.lg-thumb-outer').first();\n    this.$lgThumb = this.core.outer.find('.lg-thumb').first();\n    if (this.settings.animateThumb) {\n      this.core.outer.find('.lg-thumb').css('transition-duration', this.core.settings.speed + 'ms').css('width', this.thumbTotalWidth + 'px').css('position', 'relative');\n    }\n    this.setThumbItemHtml(this.core.galleryItems);\n  };\n  Thumbnail.prototype.enableThumbDrag = function () {\n    var _this = this;\n    var thumbDragUtils = {\n      cords: {\n        startX: 0,\n        endX: 0\n      },\n      isMoved: false,\n      newTranslateX: 0,\n      startTime: new Date(),\n      endTime: new Date(),\n      touchMoveTime: 0\n    };\n    var isDragging = false;\n    this.$thumbOuter.addClass('lg-grab');\n    this.core.outer.find('.lg-thumb').first().on('mousedown.lg.thumb', function (e) {\n      if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n        // execute only on .lg-object\n        e.preventDefault();\n        thumbDragUtils.cords.startX = e.pageX;\n        thumbDragUtils.startTime = new Date();\n        _this.thumbClickable = false;\n        isDragging = true;\n        // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n        _this.core.outer.get().scrollLeft += 1;\n        _this.core.outer.get().scrollLeft -= 1;\n        // *\n        _this.$thumbOuter.removeClass('lg-grab').addClass('lg-grabbing');\n      }\n    });\n    this.$LG(window).on(\"mousemove.lg.thumb.global\" + this.core.lgId, function (e) {\n      if (!_this.core.lgOpened) return;\n      if (isDragging) {\n        thumbDragUtils.cords.endX = e.pageX;\n        thumbDragUtils = _this.onThumbTouchMove(thumbDragUtils);\n      }\n    });\n    this.$LG(window).on(\"mouseup.lg.thumb.global\" + this.core.lgId, function () {\n      if (!_this.core.lgOpened) return;\n      if (thumbDragUtils.isMoved) {\n        thumbDragUtils = _this.onThumbTouchEnd(thumbDragUtils);\n      } else {\n        _this.thumbClickable = true;\n      }\n      if (isDragging) {\n        isDragging = false;\n        _this.$thumbOuter.removeClass('lg-grabbing').addClass('lg-grab');\n      }\n    });\n  };\n  Thumbnail.prototype.enableThumbSwipe = function () {\n    var _this = this;\n    var thumbDragUtils = {\n      cords: {\n        startX: 0,\n        endX: 0\n      },\n      isMoved: false,\n      newTranslateX: 0,\n      startTime: new Date(),\n      endTime: new Date(),\n      touchMoveTime: 0\n    };\n    this.$lgThumb.on('touchstart.lg', function (e) {\n      if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n        e.preventDefault();\n        thumbDragUtils.cords.startX = e.targetTouches[0].pageX;\n        _this.thumbClickable = false;\n        thumbDragUtils.startTime = new Date();\n      }\n    });\n    this.$lgThumb.on('touchmove.lg', function (e) {\n      if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n        e.preventDefault();\n        thumbDragUtils.cords.endX = e.targetTouches[0].pageX;\n        thumbDragUtils = _this.onThumbTouchMove(thumbDragUtils);\n      }\n    });\n    this.$lgThumb.on('touchend.lg', function () {\n      if (thumbDragUtils.isMoved) {\n        thumbDragUtils = _this.onThumbTouchEnd(thumbDragUtils);\n      } else {\n        _this.thumbClickable = true;\n      }\n    });\n  };\n  // Rebuild thumbnails\n  Thumbnail.prototype.rebuildThumbnails = function () {\n    var _this = this;\n    // Remove transitions\n    this.$thumbOuter.addClass('lg-rebuilding-thumbnails');\n    setTimeout(function () {\n      _this.thumbTotalWidth = _this.core.galleryItems.length * (_this.settings.thumbWidth + _this.settings.thumbMargin);\n      _this.$lgThumb.css('width', _this.thumbTotalWidth + 'px');\n      _this.$lgThumb.empty();\n      _this.setThumbItemHtml(_this.core.galleryItems);\n      _this.animateThumb(_this.core.index);\n    }, 50);\n    setTimeout(function () {\n      _this.$thumbOuter.removeClass('lg-rebuilding-thumbnails');\n    }, 200);\n  };\n  // @ts-check\n  Thumbnail.prototype.setTranslate = function (value) {\n    this.$lgThumb.css('transform', 'translate3d(-' + value + 'px, 0px, 0px)');\n  };\n  Thumbnail.prototype.getPossibleTransformX = function (left) {\n    if (left > this.thumbTotalWidth - this.thumbOuterWidth) {\n      left = this.thumbTotalWidth - this.thumbOuterWidth;\n    }\n    if (left < 0) {\n      left = 0;\n    }\n    return left;\n  };\n  Thumbnail.prototype.animateThumb = function (index) {\n    this.$lgThumb.css('transition-duration', this.core.settings.speed + 'ms');\n    if (this.settings.animateThumb) {\n      var position = 0;\n      switch (this.settings.currentPagerPosition) {\n        case 'left':\n          position = 0;\n          break;\n        case 'middle':\n          position = this.thumbOuterWidth / 2 - this.settings.thumbWidth / 2;\n          break;\n        case 'right':\n          position = this.thumbOuterWidth - this.settings.thumbWidth;\n      }\n      this.translateX = (this.settings.thumbWidth + this.settings.thumbMargin) * index - 1 - position;\n      if (this.translateX > this.thumbTotalWidth - this.thumbOuterWidth) {\n        this.translateX = this.thumbTotalWidth - this.thumbOuterWidth;\n      }\n      if (this.translateX < 0) {\n        this.translateX = 0;\n      }\n      this.setTranslate(this.translateX);\n    }\n  };\n  Thumbnail.prototype.onThumbTouchMove = function (thumbDragUtils) {\n    thumbDragUtils.newTranslateX = this.translateX;\n    thumbDragUtils.isMoved = true;\n    thumbDragUtils.touchMoveTime = new Date().valueOf();\n    thumbDragUtils.newTranslateX -= thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;\n    thumbDragUtils.newTranslateX = this.getPossibleTransformX(thumbDragUtils.newTranslateX);\n    // move current slide\n    this.setTranslate(thumbDragUtils.newTranslateX);\n    this.$thumbOuter.addClass('lg-dragging');\n    return thumbDragUtils;\n  };\n  Thumbnail.prototype.onThumbTouchEnd = function (thumbDragUtils) {\n    thumbDragUtils.isMoved = false;\n    thumbDragUtils.endTime = new Date();\n    this.$thumbOuter.removeClass('lg-dragging');\n    var touchDuration = thumbDragUtils.endTime.valueOf() - thumbDragUtils.startTime.valueOf();\n    var distanceXnew = thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;\n    var speedX = Math.abs(distanceXnew) / touchDuration;\n    // Some magical numbers\n    // Can be improved\n    if (speedX > 0.15 && thumbDragUtils.endTime.valueOf() - thumbDragUtils.touchMoveTime < 30) {\n      speedX += 1;\n      if (speedX > 2) {\n        speedX += 1;\n      }\n      speedX = speedX + speedX * (Math.abs(distanceXnew) / this.thumbOuterWidth);\n      this.$lgThumb.css('transition-duration', Math.min(speedX - 1, 2) + 'settings');\n      distanceXnew = distanceXnew * speedX;\n      this.translateX = this.getPossibleTransformX(this.translateX - distanceXnew);\n      this.setTranslate(this.translateX);\n    } else {\n      this.translateX = thumbDragUtils.newTranslateX;\n    }\n    if (Math.abs(thumbDragUtils.cords.endX - thumbDragUtils.cords.startX) < this.settings.thumbnailSwipeThreshold) {\n      this.thumbClickable = true;\n    }\n    return thumbDragUtils;\n  };\n  Thumbnail.prototype.getThumbHtml = function (thumb, index) {\n    var slideVideoInfo = this.core.galleryItems[index].__slideVideoInfo || {};\n    var thumbImg;\n    if (slideVideoInfo.youtube) {\n      if (this.settings.loadYouTubeThumbnail) {\n        thumbImg = '//img.youtube.com/vi/' + slideVideoInfo.youtube[1] + '/' + this.settings.youTubeThumbSize + '.jpg';\n      } else {\n        thumbImg = thumb;\n      }\n    } else {\n      thumbImg = thumb;\n    }\n    return \"<div data-lg-item-id=\\\"\" + index + \"\\\" class=\\\"lg-thumb-item \" + (index === this.core.index ? ' active' : '') + \"\\\" \\n        style=\\\"width:\" + this.settings.thumbWidth + \"px; height: \" + this.settings.thumbHeight + \";\\n            margin-right: \" + this.settings.thumbMargin + \"px;\\\">\\n            <img data-lg-item-id=\\\"\" + index + \"\\\" src=\\\"\" + thumbImg + \"\\\" />\\n        </div>\";\n  };\n  Thumbnail.prototype.getThumbItemHtml = function (items) {\n    var thumbList = '';\n    for (var i = 0; i < items.length; i++) {\n      thumbList += this.getThumbHtml(items[i].thumb, i);\n    }\n    return thumbList;\n  };\n  Thumbnail.prototype.setThumbItemHtml = function (items) {\n    var thumbList = this.getThumbItemHtml(items);\n    this.$lgThumb.html(thumbList);\n  };\n  Thumbnail.prototype.setAnimateThumbStyles = function () {\n    if (this.settings.animateThumb) {\n      this.core.outer.addClass('lg-animate-thumb');\n    }\n  };\n  // Manage thumbnail active calss\n  Thumbnail.prototype.manageActiveClassOnSlideChange = function () {\n    var _this = this;\n    // manage active class for thumbnail\n    this.core.LGel.on(lGEvents.beforeSlide + \".thumb\", function (event) {\n      var $thumb = _this.core.outer.find('.lg-thumb-item');\n      var index = event.detail.index;\n      $thumb.removeClass('active');\n      $thumb.eq(index).addClass('active');\n    });\n  };\n  // Toggle thumbnail bar\n  Thumbnail.prototype.toggleThumbBar = function () {\n    var _this = this;\n    if (this.settings.toggleThumb) {\n      this.core.outer.addClass('lg-can-toggle');\n      this.core.$toolbar.append('<button type=\"button\" aria-label=\"' + this.settings.thumbnailPluginStrings['toggleThumbnails'] + '\" class=\"lg-toggle-thumb lg-icon\"></button>');\n      this.core.outer.find('.lg-toggle-thumb').first().on('click.lg', function () {\n        _this.core.outer.toggleClass('lg-components-open');\n      });\n    }\n  };\n  Thumbnail.prototype.thumbKeyPress = function () {\n    var _this = this;\n    this.$LG(window).on(\"keydown.lg.thumb.global\" + this.core.lgId, function (e) {\n      if (!_this.core.lgOpened || !_this.settings.toggleThumb) return;\n      if (e.keyCode === 38) {\n        e.preventDefault();\n        _this.core.outer.addClass('lg-components-open');\n      } else if (e.keyCode === 40) {\n        e.preventDefault();\n        _this.core.outer.removeClass('lg-components-open');\n      }\n    });\n  };\n  Thumbnail.prototype.destroy = function () {\n    if (this.settings.thumbnail) {\n      this.$LG(window).off(\".lg.thumb.global\" + this.core.lgId);\n      this.core.LGel.off('.lg.thumb');\n      this.core.LGel.off('.thumb');\n      this.$thumbOuter.remove();\n      this.core.outer.removeClass('lg-has-thumb');\n    }\n  };\n  return Thumbnail;\n}();\nexport default Thumbnail;","map":null,"metadata":{},"sourceType":"module"}